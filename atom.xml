<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[trimeNiu's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-03-26T16:31:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[trimeNiu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2015/03/27/groovy_use/"/>
    <id>http://yoursite.com/2015/03/27/groovy_use/</id>
    <published>2015-03-26T16:31:15.000Z</published>
    <updated>2015-03-26T16:31:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="背景介绍">背景介绍</h2><pre><code>通常为了满足业务的灵活性，多采用脚本语言来满足业务多变性和灵活性。在支付宝安全风控的系统中，模型变量的定义、数据的适配均采用groovy脚本语言来设计的，当BI同学需要一个新的变量，通过一个groovy脚本语言即可定义出来。虽然运用groovy脚本语言给业务带来了比较大的灵活性和可扩展性，但如果使用不当，会存在很多潜在的风险。

支付宝风控系统中，使用groovy语言的过程如下:
</code></pre><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Alipay.com Inc.</span><br><span class="line"> * Copyright (c) 2004-2013 All Rights Reserved.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">package</span> com.alipay.groovy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.Assert;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.Binding;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.GroovyClassLoader;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.Script;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * @author hongfa.sun</span><br><span class="line"> * @version $Id: RunGroovy.java, v 0.1 2013-4-27 下午07:01:46 hongfa.sun Exp $</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> RunGroovy &#123;</span><br><span class="line">    </span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> groovyDeamo() <span class="keyword">throws</span> InstantiationException, IllegalAccessException&#123;</span><br><span class="line">        StringBuffer groovyText = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        groovyText.<span class="keyword">append</span>(<span class="string">"def var1;n"</span>);</span><br><span class="line">        groovyText.<span class="keyword">append</span>(<span class="string">"if(isIPCrediable) var1 = true;n"</span>);</span><br><span class="line">        groovyText.<span class="keyword">append</span>(<span class="string">"else var1 = false;n"</span>);</span><br><span class="line"></span><br><span class="line">        GroovyClassLoader groovyLoader = <span class="keyword">new</span> GroovyClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Class</span>&lt;Script&gt; groovyClass = (<span class="keyword">Class</span>&lt;Script&gt;) groovyLoader.parseClass(groovyText.toString());</span><br><span class="line">        Script groovyScript = groovyClass.newInstance();</span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding();</span><br><span class="line">        binding.setVariable(<span class="string">"isIPCrediable"</span>, <span class="keyword">true</span>);</span><br><span class="line">        groovyScript.setBinding(binding);</span><br><span class="line">        </span><br><span class="line">        Object groovyResult = groovyScript.run();</span><br><span class="line">        Assert.assertTrue((<span class="keyword">Boolean</span>)groovyResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  其实java中调用groovy的核心代码就这几步，但其中有很多陷阱，下面分别一一表述。</p>
<h2 id="使用问题">使用问题</h2><h3 id="JVM_perm区OOM">JVM perm区OOM</h3><pre><code>曾经我们的系统因为某个业务场景下用到了groovy，上线后系统很快就发生因为perm OOM导致crash了。最终查询出来原因如下：在该业务场景下，每次调用传入的都是GroovyText文本，返回GroovyText的执行结果，代码如下：
</code></pre><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object exeGroovyText(String groovyText) <span class="keyword">throws</span> InstantiationException, IllegalAccessException&#123;</span><br><span class="line">        GroovyClassLoader groovyLoader = <span class="keyword">new</span> GroovyClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Class</span>&lt;Script&gt; groovyClass = (<span class="keyword">Class</span>&lt;Script&gt;) groovyLoader.parseClass(groovyText.toString());</span><br><span class="line">        Script groovyScript = groovyClass.newInstance();</span><br><span class="line">        Binding binding = <span class="keyword">new</span> Binding();</span><br><span class="line">        binding.setVariable(<span class="string">"isIPCrediable"</span>, <span class="keyword">true</span>);</span><br><span class="line">        groovyScript.setBinding(binding);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  groovyScript.run();</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">    这样会导致什么问题呢？</span><br><span class="line"></span><br><span class="line">    每次执行都去编译文本，生成<span class="keyword">Class</span>信息。而每一个<span class="keyword">Class</span>信息都需要占用Perm区的空间，而perm区回收是随着CMS GC一起回收的。在高QPS下，大量的<span class="keyword">Class</span>对象被生成，而没有达到CMS GC的触发点，直接撑爆了perm区，导致OOM。</span><br><span class="line">存在性能问题，如果去分析这段代码的性能瓶颈，会发现<span class="number">90</span>%的耗时占用在<span class="keyword">Class</span>&lt;Script&gt; groovyClass = (<span class="keyword">Class</span>&lt;Script&gt;) groovyLoader.parseClass(groovyText.toString());这一步。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> ##数据计算混乱问题</span><br><span class="line"></span><br><span class="line">    为了解决上面perm区oom问题，通常是缓存Script对象，但会带来多线程运行环境下数据运算混乱的问题。 </span><br><span class="line"></span><br><span class="line">    先给出一个实际例子，来模拟运行后数据计算出现了混乱的情况：</span><br></pre></td></tr></table></figure>
<p>  @SuppressWarnings(“unchecked”)<br>    @Test<br>    public void exeByScript() throws InstantiationException, IllegalAccessException, InterruptedException {<br>        StringBuffer groovyText = new StringBuffer();<br>        groovyText.append(“def var1;\n”);<br>        groovyText.append(“if(isIPCrediable) var1 = true;\n”);<br>        groovyText.append(“else var1 = false;\n”);</p>
<pre><code>    <span class="type">GroovyClassLoader</span> groovyLoader = new <span class="type">GroovyClassLoader</span>();

    <span class="type">Class</span>&lt;<span class="type">Script</span>&gt; groovyClass = (<span class="type">Class</span>&lt;<span class="type">Script</span>&gt;) groovyLoader.parseClass(groovyText.toString());
    final <span class="type">Script</span> groovyScript = groovyClass.newInstance();

    exeByScript(groovyScript);
}

public <span class="type">void</span> exeByScript(final <span class="type">Script</span> groovyScript) throws <span class="type">InterruptedException</span> {

    <span class="type">List</span>&lt;<span class="type">Thread</span>&gt; threadList = new <span class="type">ArrayList</span>&lt;<span class="type">Thread</span>&gt;();
    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {
        <span class="type">Thread</span> t = new <span class="type">Thread</span>(new <span class="type">Runnable</span>() {
            public <span class="type">void</span> run() {
                <span class="type">Random</span> random = new <span class="type">Random</span>();
                boolean isIPCrediable = <span class="literal">false</span>;

                <span class="type">int</span> randomInt = random.nextInt(<span class="number">2</span>);
                <span class="keyword">if</span> (randomInt == <span class="number">0</span>) {
                    isIPCrediable = <span class="literal">true</span>;
                } <span class="keyword">else</span> {
                    isIPCrediable = <span class="literal">false</span>;
                }
                <span class="keyword">try</span> {
                    <span class="type">Thread</span>.sleep(<span class="number">100</span>);
                } catch (<span class="type">InterruptedException</span> e) {

                }
                <span class="type">Binding</span> binding = new <span class="type">Binding</span>();
                binding.setVariable(<span class="string">"isIPCrediable"</span>, isIPCrediable);
                groovyScript.setBinding(binding);

                <span class="type">Object</span> <span class="literal">result</span> = groovyScript.run();

                <span class="keyword">if</span> (((<span class="type">Boolean</span>) <span class="literal">result</span>).booleanValue() != isIPCrediable) {
                    <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="type">Thread</span>.currentThread().getId() + <span class="string">":"</span> + isIPCrediable
                                       + <span class="string">":="</span> + <span class="literal">result</span>);
                }
            }
        });
        threadList.add(t);
    }

    <span class="keyword">for</span> (<span class="type">Thread</span> th : threadList) {
        th.start();
    }

    <span class="type">Thread</span>.sleep(<span class="number">500</span>);
}
</code></pre><pre><code>
如果不考虑并发的问题，代码在执行后，是不会输出日志的，而实际的运行结果如下（由于并发的随机性，实际的执行结果可能每次都不一样）：

线程<span class="string">ID:</span><span class="number">25</span>:<span class="string">false:</span>=<span class="literal">true</span>
线程<span class="string">ID:</span><span class="number">17</span>:<span class="string">true:</span>=<span class="literal">false</span>
线程<span class="string">ID:</span><span class="number">40</span>:<span class="string">false:</span>=<span class="literal">true</span>
线程<span class="string">ID:</span><span class="number">38</span>:<span class="string">true:</span>=<span class="literal">false</span>


原因分析：缓存了Script对象后，在高并发的情况下，在执行赋值binding对象后，真正执行run操作时，拿到的binding对象可能是其它线程赋值的对象，所以出现数据计算混乱的情况。
解决方案：不能缓存Script对象，而缓存Class&lt;Script&gt;，上面的程序如下修改就不会出现并发数据计算混乱的问题了。代码如下：
</code></pre><p>@SuppressWarnings(“unchecked”)<br>    @Test<br>    public void exeByScript() throws InstantiationException, IllegalAccessException,<br>                             InterruptedException, InstantiationException, IllegalAccessException {<br>        StringBuffer groovyText = new StringBuffer();<br>        groovyText.append(“def var1;\n”);<br>        groovyText.append(“if(isIPCrediable) var1 = true;\n”);<br>        groovyText.append(“else var1 = false;\n”);</p>
<pre><code>    <span class="type">GroovyClassLoader</span> groovyLoader = new <span class="type">GroovyClassLoader</span>();

    <span class="type">Class</span>&lt;<span class="type">Script</span>&gt; groovyClass = (<span class="type">Class</span>&lt;<span class="type">Script</span>&gt;) groovyLoader.parseClass(groovyText.toString());
    exeByScript(groovyClass);
}

public <span class="type">void</span> exeByScript(final <span class="type">Class</span>&lt;<span class="type">Script</span>&gt; groovyClass) throws <span class="type">InterruptedException</span> {

    <span class="type">List</span>&lt;<span class="type">Thread</span>&gt; threadList = new <span class="type">ArrayList</span>&lt;<span class="type">Thread</span>&gt;();
    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {
        <span class="type">Thread</span> t = new <span class="type">Thread</span>(new <span class="type">Runnable</span>() {
            public <span class="type">void</span> run() {
                <span class="type">Script</span> groovyScript;
                <span class="keyword">try</span> {
                    groovyScript = groovyClass.newInstance();
                    <span class="type">Random</span> random = new <span class="type">Random</span>();
                    boolean isIPCrediable = <span class="literal">false</span>;

                    <span class="type">int</span> randomInt = random.nextInt(<span class="number">2</span>);
                    <span class="keyword">if</span> (randomInt == <span class="number">0</span>) {
                        isIPCrediable = <span class="literal">true</span>;
                    } <span class="keyword">else</span> {
                        isIPCrediable = <span class="literal">false</span>;
                    }

                    <span class="type">Binding</span> binding = new <span class="type">Binding</span>();
                    binding.setVariable(<span class="string">"isIPCrediable"</span>, isIPCrediable);
                    groovyScript.setBinding(binding);

                    <span class="type">Object</span> <span class="literal">result</span> = groovyScript.run();

                    <span class="keyword">if</span> (((<span class="type">Boolean</span>) <span class="literal">result</span>).booleanValue() != isIPCrediable) {
                        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"线程ID:"</span> + <span class="type">Thread</span>.currentThread().getId() + <span class="string">":"</span>
                                           + isIPCrediable + <span class="string">":="</span> + <span class="literal">result</span>);
                    }

                    <span class="type">Thread</span>.sleep(<span class="number">100</span>);
                } catch (<span class="type">InstantiationException</span> e1) {
                } catch (<span class="type">IllegalAccessException</span> e1) {
                } catch (<span class="type">InterruptedException</span> e) {
                }
            }
        });
        threadList.add(t);
    }

    <span class="keyword">for</span> (<span class="type">Thread</span> th : threadList) {
        th.start();
    }

    <span class="type">Thread</span>.sleep(<span class="number">500</span>);
}
</code></pre><p>``` </p>
<h2 id="Class对象不能被回收">Class<script>对象不能被回收</h2><pre><code>缓存<span class="keyword">Class</span>&lt;Script&gt;对象后，每次业务数据变更，业务上都需要生成新的<span class="keyword">Class</span>&lt;Script&gt;对象，perm区内存不能随着CMS GC回收掉老的<span class="keyword">Class</span>&lt;Script&gt;对象，随着多次发布，最终导致OOM问题
问题原因：很可能每次在生成<span class="keyword">Class</span>&lt;Script&gt;对象时，使用了静态单例的GroovyClassLoader，这样由于老的<span class="keyword">Class</span>&lt;Script&gt;对象中的groovyClassLoader处于存活状态，导致所有不再使用的<span class="keyword">Class</span>&lt;Script&gt;对象均不能被GC 回收。
解决方案：确保在每次更新缓存<span class="keyword">Class</span>&lt;Script&gt;对象时候，采用不同的groovyClassLoader，使老的<span class="keyword">Class</span>&lt;Script&gt;对象引用的groovyClassLoader也不在被引用。这样在CMS GC时，perm区这些<span class="keyword">Class</span>&lt;Script&gt;对象得以回收。

 为了使CMS GC能回收perm区，JVM需要增加如下配置：

 <span class="number">1</span>、Jdk <span class="number">1.5</span>:        -XX:+CMSPermGenSweepingEnabled 和-XX:+CMSClassUnloadingEnabled

 <span class="number">2</span>、Jdk <span class="number">1.6</span>:        -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled
</code></pre><h2 id="多次串行执行Groovy的性能问题">多次串行执行Groovy的性能问题</h2><pre><code>尽管缓存了<span class="keyword">Class</span>&lt;Script&gt;对象，如果一个线程中需要多次去执行多个<span class="keyword">Class</span>&lt;Script&gt;对象，还是存在perm区容量及运行性能瓶颈的问题。在支付宝风控系统模型平台中，一个模型的计算需要去执行<span class="number">600</span>个变量。此时如果采用每个变量都预先编译成单独的<span class="keyword">Class</span>&lt;Script&gt;对象，perm区大约会占用<span class="number">150</span>Mb的空间，运行这<span class="number">600</span>个变量的Groovy脚本总耗时为<span class="number">70</span>ms，很显然在perm区容量及运行性能方面都存在问题。

解决方案：将多个Groovy脚本合并成一个脚本去编译和执行，当然要合理的构件合并的脚本逻辑。通过这种方法，编译这<span class="number">600</span>个变量只需要<span class="number">8</span>MB的空间，运行这<span class="number">600</span>个变量的Groovy脚本总耗时现将至<span class="number">18</span>ms。
</code></pre></script></h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景介绍">背景介绍</h2><pre><code>通常为了满足业务的灵活性，多采用脚本语言来满足业务多变性和灵活性。在支付宝安全风控的系统中，模型变量的定义、数据的适配均采用groovy脚本语言来设计的，当BI同学需要一个新的变量，通过一个groovy脚本语言即]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/03/15/hello-world/"/>
    <id>http://yoursite.com/2015/03/15/hello-world/</id>
    <published>2015-03-15T13:59:03.000Z</published>
    <updated>2015-03-15T13:59:03.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux常用命令]]></title>
    <link href="http://yoursite.com/2014/05/07/linux_cmd/"/>
    <id>http://yoursite.com/2014/05/07/linux_cmd/</id>
    <published>2014-05-07T10:44:12.000Z</published>
    <updated>2015-03-25T15:51:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="grep命令">grep命令</h2><h3 id="求交集命令">求交集命令</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -F -f a1.txt a2.txt | <span class="keyword">sort</span> | uniq</span><br></pre></td></tr></table></figure>
<h3 id="求差集命令">求差集命令</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -F -v -f a1.txt a2.txt | <span class="keyword">sort</span> | uniq</span><br></pre></td></tr></table></figure>
<h3 id="去重命令">去重命令</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> <span class="string">'test'</span> test.<span class="keyword">log</span> | <span class="keyword">sort</span> -rn | uniq</span><br></pre></td></tr></table></figure>
<h2 id="sed命令">sed命令</h2><h3 id="替换文件">替换文件</h3><p>将<strong>test.log</strong>文件中的<strong>xx</strong>内容替换为<strong>yy</strong>内容：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -<span class="built_in">i</span> <span class="string">'s/xx/yy/g'</span> test.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="grep命令">grep命令</h2><h3 id="求交集命令">求交集命令</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1]]>
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="常用命令" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>